/*
*   LendBook por:
*   Jonathan Americo Soares -- 42311ETE013
*   Joaquim Vitor castilho ferreira Pedro -- 42111ETE020
*
*/
package blibioteca_v_1_1;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultRowSorter;
import org.json.simple.JSONObject;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author bruxo
 */
public class UiViewBooks extends javax.swing.JPanel {

    /**
     * Creates new form UiViewBooks
     */
    private String Filter;
    private String view;

    public UiViewBooks() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_books = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        bnt_filter = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        box_Filter = new javax.swing.JComboBox<>();
        filter_textfield = new javax.swing.JTextField();
        box_View = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        errMsg = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        num_books = new javax.swing.JLabel();

        table_books.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Titulo", "Autor", "Editora", "Publicação", "Genero", "Isbn", "Qnt"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_books);
        if (table_books.getColumnModel().getColumnCount() > 0) {
            table_books.getColumnModel().getColumn(6).setResizable(false);
            table_books.getColumnModel().getColumn(6).setPreferredWidth(20);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Filtros");

        bnt_filter.setText("Filtrar");
        bnt_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_filterActionPerformed(evt);
            }
        });

        jLabel2.setText("Filtra por:");

        box_Filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Titulo", "Isbn", "Autor", "Genero" }));

        box_View.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Disponiveis", "Emprestados" }));

        jLabel3.setText("Ver:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bnt_filter)
                .addGap(6, 6, 6))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(box_View, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(errMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filter_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(box_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(box_View, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(box_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filter_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bnt_filter)
                .addContainerGap())
        );

        jLabel4.setText("Total de Livros:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(num_books, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(num_books, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bnt_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_filterActionPerformed

        Filter = (String) box_Filter.getSelectedItem();
        view = (String) box_View.getSelectedItem();

        JSONObject BooksLoads = Books.ReadJsonBooks(0);
        DefaultTableModel model = (DefaultTableModel) table_books.getModel();
        model.setRowCount(0);
        // Criaa umnm classifidor de linhas
        DefaultRowSorter sorter = new TableRowSorter(model);
        table_books.setRowSorter(sorter);

        if (view.equals("Todos")) {// carrega todos os livros
            System.out.println("Todos");
            JSONObject Booksava = Books.ReadJsonBooks(0);
            JSONObject Bookunv = Books.ReadJsonBooks(1);
            long numeroLivrosAva = ((Number) Booksava.get("Numero de Livros")).longValue();
            long numeroLivrosun = ((Number) Bookunv.get("Numero de Livros")).longValue();

            num_books.setText(Long.toString(numeroLivrosun + numeroLivrosAva));//coloca na tela quantidade de livros somandos
            //System.out.println(Booksava);
            //System.err.println(Bookunv);

            // Mescla os dois objetos JSON
            /*  JSONObject allBooks = new JSONObject();
            
                Booksava.remove("Numero de Livros");// remove finalizador do json
                Bookunv.remove("Numero de Livros");// remove finalizador do json
                allBooks.putAll(Booksava); // add a variavel guardar todos os livros
                allBooks.putAll(Bookunv);// add a variavel guardar todos os livros
             */
            for (Object key : Bookunv.keySet()) { // itera sobre todos os livros indisponíveis
                Object value = Bookunv.get(key);
                Boolean bookcontrol = true; // variavel de controle false se livro n exitir que precisocriar novo
                if (value instanceof JSONObject) {
                    JSONObject livroun = (JSONObject) value;
                    // coleta informaçoes do livro
                    long quantity = ((Number) livroun.get("quantity")).longValue();
                    String title = (String) livroun.get("title");
                    String author = (String) livroun.get("author");
                    String genre = (String) livroun.get("genre");
                    String isbn = (String) livroun.get("isbn");
                    String publishingCompany = (String) livroun.get("publishing_company");
                    String datePublishing = (String) livroun.get("date_publishing");

                    //mova a análise JSON para fora deste bloco para eficiência
                    JSONParser parser = new JSONParser();
                    JSONObject json = Booksava;

                    // Verifique se o título desejado está presente no JSON
                    for (Object innerkey : json.keySet()) {
                        Object valuea = json.get(innerkey);

                        if (valuea instanceof JSONObject) {
                            JSONObject livro = (JSONObject) valuea;

                            if (livro.get("title").equals(title)) { // procura titulo
                                // atulaiza quantidade de livro
                                Number quanti = (Number) livro.get("quantity"); 
                                long valorLongo = quanti.longValue();
                                livro.put("quantity", valorLongo + 1);

                                // Update the total number of books
                                long numeroLivros = (long) json.get("Numero de Livros");
                                json.put("Numero de Livros", numeroLivros + 1);
                                BooksLoads = json; // loaded book equal to the two JSON books
                                bookcontrol = false;
                            }
                        }
                    }
                    if(bookcontrol){
                    // Cria novo livro se ele n exitir
                     
                        JSONObject novoLivro = new JSONObject();
                        novoLivro.put("title", title);
                        novoLivro.put("author", author);
                        novoLivro.put("genre", genre);
                        novoLivro.put("publishing_company", publishingCompany);
                        novoLivro.put("date_publishing", datePublishing);
                        novoLivro.put("isbn", isbn);
                        novoLivro.put("quantity", 1);

                        long numeroLivros = (long) json.get("Numero de Livros");
                        json.put(numeroLivros + 1, novoLivro);
                        json.put("Numero de Livros", numeroLivros + 1);
                        BooksLoads = json; // loaded book equal to the two JSON books
                        System.out.println(json);
                    }
                }
            }

            
            
            //System.err.println(BooksLoads);
        } else if (view.equals("Disponiveis")) { // carrega livros disponiveis
            System.out.println("Disponiveis");
            BooksLoads = Books.ReadJsonBooks(0); //carrega livros disponiveis
            long numeroLivros = (long) BooksLoads.get("Numero de Livros");
            num_books.setText(Long.toString(numeroLivros));//coloca na tela quantidade de livros

        } else { //carrega livros indisponiveis / emprestados
            BooksLoads = Books.ReadJsonBooks(1);//carrega livros indisponiveis
            long numeroLivros = (long) BooksLoads.get("Numero de Livros");
            num_books.setText(Long.toString(numeroLivros)); //coloca na tela quantidade de livros

        }

        String filter_op = filter_textfield.getText();
        if (!filter_op.isEmpty()) {

            if (Filter.equals("Titulo")) {
                Filter = "title";
            } else if (Filter.equals("Isbn")) {
                Filter = "isbn";
            } else if (Filter.equals("Autor")) {
                Filter = "author";
            } else if (Filter.equals("Genero")) {
                Filter = "genre";
            }
            boolean check = false; // variavel controle pa saber se algun livro foi encontrado ocm filtro
            long qntBoks = 0;
            for (Object key : BooksLoads.keySet()) {
                Object value = BooksLoads.get(key);

                if (value instanceof JSONObject) {
                    JSONObject livro = (JSONObject) value;

                    if (livro.get(Filter).equals(filter_op)) {
                        //coleta as informalçoes dos livros
                        long quantity = (long) livro.get("quantity");
                        String title = (String) livro.get("title");
                        String author = (String) livro.get("author");
                        String genre = (String) livro.get("genre");
                        String isbn = (String) livro.get("isbn");
                        String publishingCompany = (String) livro.get("publishing_company");
                        String datePublishing = (String) livro.get("date_publishing");
                        //adciona o titulo a tabela
                        model.addRow(new Object[]{title, author, publishingCompany, datePublishing, genre, isbn, quantity});
                        check = true; // true se algun livro foi encontrado com filtro aplicado
                        qntBoks = +1;
                        qntBoks = +quantity;
                        num_books.setText(Long.toString(qntBoks)); //coloca na tela quantidade de livros encontrados
                    }
                }
            }

            if (!check) { // se nenhum livro foi encontrado avisa usuario
                errMsg.setText("Nenhum livro encontrado");
                num_books.setText("0");
            } else {
                errMsg.setText("");
            }
            sorter.toggleSortOrder(0);
        } else { //se na tiver filtro nenhum plota tuudo que achar

            //varre tudo que item no json
            for (Object key : BooksLoads.keySet()) {
                Object value = BooksLoads.get(key);

                if (value instanceof JSONObject) {
                    JSONObject livro = (JSONObject) value;

                    //coleta as informalçoes dos livros
                    Object quantity = livro.get("quantity");
                    String title = (String) livro.get("title");
                    String author = (String) livro.get("author");
                    String genre = (String) livro.get("genre");
                    String isbn = (String) livro.get("isbn");
                    String publishingCompany = (String) livro.get("publishing_company");
                    String datePublishing = (String) livro.get("date_publishing");
                    //adciona o titulo a tabela
                    model.addRow(new Object[]{title, author, publishingCompany, datePublishing, genre, isbn, quantity});

                }
            }

            sorter.toggleSortOrder(0);
        }


    }//GEN-LAST:event_bnt_filterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton bnt_filter;
    private javax.swing.JComboBox<String> box_Filter;
    private javax.swing.JComboBox<String> box_View;
    private javax.swing.JLabel errMsg;
    private javax.swing.JTextField filter_textfield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel num_books;
    private javax.swing.JTable table_books;
    // End of variables declaration//GEN-END:variables
}
